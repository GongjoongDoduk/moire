package org.gjdd.moire.decorators.entities

import eu.pb4.polymer.virtualentity.api.ElementHolder
import net.minecraft.entity.Entity
import org.gjdd.moire.decorators.Decorator
import org.gjdd.moire.decorators.DecoratorContext

/**
 * A decorator that is invoked after an entity is added to the world. The [ElementHolder] generated by this
 * decorator is attached to the entity via [eu.pb4.polymer.virtualentity.api.attachment.EntityAttachment].
 *
 * @param T The type of entity.
 */
public abstract class EntityAddedDecorator<T : Entity>(

    /**
     * The class of the entity.
     */
    public val entityClass: Class<T>
) : Decorator<EntityAddedDecoratorContext<T>>

/**
 * Decorator context for [EntityAddedDecorator].
 *
 * @param T The type of entity.
 */
public class EntityAddedDecoratorContext<T : Entity>(

    /**
     * The entity instance.
     */
    public val entity: T
) : DecoratorContext

/**
 * Creates an instance of [EntityAddedDecorator] with the given [block].
 *
 * @param T The type of entity.
 * @param entityClass The class of the entity.
 * @param block A lambda to create an [ElementHolder] for the entity.
 */
public inline fun <reified T : Entity> entityAddedDecorator(
    entityClass: Class<T> = T::class.java,
    crossinline block: EntityAddedDecoratorContext<T>.() -> ElementHolder
): EntityAddedDecorator<T> =
    object : EntityAddedDecorator<T>(entityClass) {
        override fun decorate(context: EntityAddedDecoratorContext<T>) = context.block()
    }